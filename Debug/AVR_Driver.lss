
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00001008  0000109c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a6  008000a6  000010e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002246  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd3  00000000  00000000  0000356e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001185  00000000  00000000  00004141  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  000052c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079f  00000000  00000000  00005744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d0d  00000000  00000000  00005ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00007bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_1>
       8:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 03 	call	0x70a	; 0x70a <main>
      8a:	0c 94 02 08 	jmp	0x1004	; 0x1004 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sum>:

int16_t sum(int16_t n1, int16_t n2)
{
	int16_t res = n1 + n2;
	return res;
}
      92:	86 0f       	add	r24, r22
      94:	97 1f       	adc	r25, r23
      96:	08 95       	ret

00000098 <mul>:

int16_t mul(int16_t n1, int16_t n2)
{
	int16_t res = n1 * n2;
	return res;
}
      98:	9c 01       	movw	r18, r24
      9a:	26 9f       	mul	r18, r22
      9c:	c0 01       	movw	r24, r0
      9e:	27 9f       	mul	r18, r23
      a0:	90 0d       	add	r25, r0
      a2:	36 9f       	mul	r19, r22
      a4:	90 0d       	add	r25, r0
      a6:	11 24       	eor	r1, r1
      a8:	08 95       	ret

000000aa <sub>:

int16_t sub(int16_t n1, int16_t n2)
{
	int16_t res = n1 - n2;
	return res;
}
      aa:	86 1b       	sub	r24, r22
      ac:	97 0b       	sbc	r25, r23
      ae:	08 95       	ret

000000b0 <div>:

float div(float n1, float n2)
{
      b0:	8f 92       	push	r8
      b2:	9f 92       	push	r9
      b4:	af 92       	push	r10
      b6:	bf 92       	push	r11
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	4b 01       	movw	r8, r22
      c2:	5c 01       	movw	r10, r24
      c4:	69 01       	movw	r12, r18
      c6:	7a 01       	movw	r14, r20
	float res=0;
	if (n2==0)
      c8:	20 e0       	ldi	r18, 0x00	; 0
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	a9 01       	movw	r20, r18
      ce:	c7 01       	movw	r24, r14
      d0:	b6 01       	movw	r22, r12
      d2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__cmpsf2>
      d6:	81 11       	cpse	r24, r1
      d8:	0c c0       	rjmp	.+24     	; 0xf2 <div+0x42>
	{
		LCD_GOTO(1,0);
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	0e 94 82 02 	call	0x504	; 0x504 <LCD_GOTO>
		LCD_WriteString("Error");
      e2:	80 e6       	ldi	r24, 0x60	; 96
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteString>
	return res;
}

float div(float n1, float n2)
{
	float res=0;
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	cb 01       	movw	r24, r22
      f0:	06 c0       	rjmp	.+12     	; 0xfe <div+0x4e>
		LCD_GOTO(1,0);
		LCD_WriteString("Error");
	}
	else
	{
		res = n1 / n2;
      f2:	a7 01       	movw	r20, r14
      f4:	96 01       	movw	r18, r12
      f6:	c5 01       	movw	r24, r10
      f8:	b4 01       	movw	r22, r8
      fa:	0e 94 04 06 	call	0xc08	; 0xc08 <__divsf3>
	}
	return res;
}
      fe:	ff 90       	pop	r15
     100:	ef 90       	pop	r14
     102:	df 90       	pop	r13
     104:	cf 90       	pop	r12
     106:	bf 90       	pop	r11
     108:	af 90       	pop	r10
     10a:	9f 90       	pop	r9
     10c:	8f 90       	pop	r8
     10e:	08 95       	ret

00000110 <Calculator_call>:
#include "Calculator_call.h"


void Calculator_call()
{
	Init_Pins();
     110:	0e 94 73 04 	call	0x8e6	; 0x8e6 <Init_Pins>
	LCD_Init();
     114:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_Init>
	int8_t n1=0, n2=0, op=' ';
	float res=0;
	LCD_GOTO(0,0);
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	0e 94 82 02 	call	0x504	; 0x504 <LCD_GOTO>
	LCD_WriteString("   Calculator ");
     120:	86 e6       	ldi	r24, 0x66	; 102
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteString>
	LCD_GOTO(1,0);
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	0e 94 82 02 	call	0x504	; 0x504 <LCD_GOTO>
void Calculator_call()
{
	Init_Pins();
	LCD_Init();
	int8_t n1=0, n2=0, op=' ';
	float res=0;
     130:	c1 2c       	mov	r12, r1
     132:	d1 2c       	mov	r13, r1
     134:	76 01       	movw	r14, r12

void Calculator_call()
{
	Init_Pins();
	LCD_Init();
	int8_t n1=0, n2=0, op=' ';
     136:	10 e2       	ldi	r17, 0x20	; 32
     138:	00 e0       	ldi	r16, 0x00	; 0
     13a:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_GOTO(0,0);
	LCD_WriteString("   Calculator ");
	LCD_GOTO(1,0);
	while(1)
	{
		uint8_t x = keypad_Data();
     13c:	0e 94 30 01 	call	0x260	; 0x260 <keypad_Data>
     140:	c8 2f       	mov	r28, r24
		if (x != DEFAULT_KEY)
     142:	8e 32       	cpi	r24, 0x2E	; 46
     144:	d9 f3       	breq	.-10     	; 0x13c <Calculator_call+0x2c>
		{
			LCD_WriteChar(x);
     146:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_WriteChar>
			
			// to reset the calculator
			if (x == 'c')
     14a:	c3 36       	cpi	r28, 0x63	; 99
     14c:	81 f4       	brne	.+32     	; 0x16e <Calculator_call+0x5e>
			{
				LCD_Clear();
     14e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_Clear>
				n1=0;
				n2=0;
				LCD_GOTO(0,0);
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 82 02 	call	0x504	; 0x504 <LCD_GOTO>
				LCD_WriteString("   Calculator ");
     15a:	86 e6       	ldi	r24, 0x66	; 102
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_WriteString>
				LCD_GOTO(1,0);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 82 02 	call	0x504	; 0x504 <LCD_GOTO>
			// to reset the calculator
			if (x == 'c')
			{
				LCD_Clear();
				n1=0;
				n2=0;
     16a:	00 e0       	ldi	r16, 0x00	; 0
			
			// to reset the calculator
			if (x == 'c')
			{
				LCD_Clear();
				n1=0;
     16c:	d0 e0       	ldi	r29, 0x00	; 0
				LCD_WriteString("   Calculator ");
				LCD_GOTO(1,0);
			}
			
			// to enter numbers
			if (x>='0' && x<='9')
     16e:	80 ed       	ldi	r24, 0xD0	; 208
     170:	8c 0f       	add	r24, r28
     172:	8a 30       	cpi	r24, 0x0A	; 10
     174:	38 f4       	brcc	.+14     	; 0x184 <Calculator_call+0x74>
			{
				n1=n1*10+(x-'0');
     176:	dd 0f       	add	r29, r29
     178:	8d 2f       	mov	r24, r29
     17a:	88 0f       	add	r24, r24
     17c:	88 0f       	add	r24, r24
     17e:	d8 0f       	add	r29, r24
     180:	dc 0f       	add	r29, r28
     182:	d0 53       	subi	r29, 0x30	; 48
			}
			
			// to enter operands
			if (x=='+' || x=='/'|| x=='-' || x=='*')
     184:	cb 32       	cpi	r28, 0x2B	; 43
     186:	31 f0       	breq	.+12     	; 0x194 <Calculator_call+0x84>
     188:	cf 32       	cpi	r28, 0x2F	; 47
     18a:	21 f0       	breq	.+8      	; 0x194 <Calculator_call+0x84>
     18c:	cd 32       	cpi	r28, 0x2D	; 45
     18e:	11 f0       	breq	.+4      	; 0x194 <Calculator_call+0x84>
     190:	ca 32       	cpi	r28, 0x2A	; 42
     192:	19 f4       	brne	.+6      	; 0x19a <Calculator_call+0x8a>
			{
				op=x;
     194:	1c 2f       	mov	r17, r28
				n2=n1;
     196:	0d 2f       	mov	r16, r29
				n1=0;
     198:	d0 e0       	ldi	r29, 0x00	; 0
			}
			// to show result
			if (x=='=' )
     19a:	cd 33       	cpi	r28, 0x3D	; 61
     19c:	79 f6       	brne	.-98     	; 0x13c <Calculator_call+0x2c>
			{
				switch (op)
     19e:	1b 32       	cpi	r17, 0x2B	; 43
     1a0:	49 f0       	breq	.+18     	; 0x1b4 <Calculator_call+0xa4>
     1a2:	1c f4       	brge	.+6      	; 0x1aa <Calculator_call+0x9a>
     1a4:	1a 32       	cpi	r17, 0x2A	; 42
     1a6:	61 f1       	breq	.+88     	; 0x200 <Calculator_call+0xf0>
     1a8:	56 c0       	rjmp	.+172    	; 0x256 <Calculator_call+0x146>
     1aa:	1d 32       	cpi	r17, 0x2D	; 45
     1ac:	b1 f0       	breq	.+44     	; 0x1da <Calculator_call+0xca>
     1ae:	1f 32       	cpi	r17, 0x2F	; 47
     1b0:	d1 f1       	breq	.+116    	; 0x226 <Calculator_call+0x116>
     1b2:	51 c0       	rjmp	.+162    	; 0x256 <Calculator_call+0x146>
				{
					case '+':
					res=sum(n2,n1);
     1b4:	6d 2f       	mov	r22, r29
     1b6:	0d 2e       	mov	r0, r29
     1b8:	00 0c       	add	r0, r0
     1ba:	77 0b       	sbc	r23, r23
     1bc:	80 2f       	mov	r24, r16
     1be:	00 2e       	mov	r0, r16
     1c0:	00 0c       	add	r0, r0
     1c2:	99 0b       	sbc	r25, r25
     1c4:	0e 94 49 00 	call	0x92	; 0x92 <sum>
     1c8:	bc 01       	movw	r22, r24
     1ca:	99 0f       	add	r25, r25
     1cc:	88 0b       	sbc	r24, r24
     1ce:	99 0b       	sbc	r25, r25
     1d0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     1d4:	6b 01       	movw	r12, r22
     1d6:	7c 01       	movw	r14, r24
					break;
     1d8:	3e c0       	rjmp	.+124    	; 0x256 <Calculator_call+0x146>
					case '-':
					res=sub(n2,n1);
     1da:	6d 2f       	mov	r22, r29
     1dc:	0d 2e       	mov	r0, r29
     1de:	00 0c       	add	r0, r0
     1e0:	77 0b       	sbc	r23, r23
     1e2:	80 2f       	mov	r24, r16
     1e4:	00 2e       	mov	r0, r16
     1e6:	00 0c       	add	r0, r0
     1e8:	99 0b       	sbc	r25, r25
     1ea:	0e 94 55 00 	call	0xaa	; 0xaa <sub>
     1ee:	bc 01       	movw	r22, r24
     1f0:	99 0f       	add	r25, r25
     1f2:	88 0b       	sbc	r24, r24
     1f4:	99 0b       	sbc	r25, r25
     1f6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     1fa:	6b 01       	movw	r12, r22
     1fc:	7c 01       	movw	r14, r24
					break;
     1fe:	2b c0       	rjmp	.+86     	; 0x256 <Calculator_call+0x146>
					case '*':
					res=mul(n2,n1);
     200:	6d 2f       	mov	r22, r29
     202:	0d 2e       	mov	r0, r29
     204:	00 0c       	add	r0, r0
     206:	77 0b       	sbc	r23, r23
     208:	80 2f       	mov	r24, r16
     20a:	00 2e       	mov	r0, r16
     20c:	00 0c       	add	r0, r0
     20e:	99 0b       	sbc	r25, r25
     210:	0e 94 4c 00 	call	0x98	; 0x98 <mul>
     214:	bc 01       	movw	r22, r24
     216:	99 0f       	add	r25, r25
     218:	88 0b       	sbc	r24, r24
     21a:	99 0b       	sbc	r25, r25
     21c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
					break;
     224:	18 c0       	rjmp	.+48     	; 0x256 <Calculator_call+0x146>
					case '/':
					res=div(n2,n1);
     226:	6d 2f       	mov	r22, r29
     228:	0d 2e       	mov	r0, r29
     22a:	00 0c       	add	r0, r0
     22c:	77 0b       	sbc	r23, r23
     22e:	88 0b       	sbc	r24, r24
     230:	99 0b       	sbc	r25, r25
     232:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     236:	6b 01       	movw	r12, r22
     238:	7c 01       	movw	r14, r24
     23a:	60 2f       	mov	r22, r16
     23c:	00 2e       	mov	r0, r16
     23e:	00 0c       	add	r0, r0
     240:	77 0b       	sbc	r23, r23
     242:	88 0b       	sbc	r24, r24
     244:	99 0b       	sbc	r25, r25
     246:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     24a:	a7 01       	movw	r20, r14
     24c:	96 01       	movw	r18, r12
     24e:	0e 94 58 00 	call	0xb0	; 0xb0 <div>
     252:	6b 01       	movw	r12, r22
     254:	7c 01       	movw	r14, r24
					break;
				}
				LCD_WriteNumber(res);
     256:	c7 01       	movw	r24, r14
     258:	b6 01       	movw	r22, r12
     25a:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_WriteNumber>
     25e:	6e cf       	rjmp	.-292    	; 0x13c <Calculator_call+0x2c>

00000260 <keypad_Data>:
	{'c' , '0' , '=' , '+'}
};


uint8_t keypad_Data(void)
{
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
	uint8_t r , c , key = DEFAULT_KEY;
	// set all output pins to High
	DIO_Writepin(FIRST_OUT_Pin , HIGH);
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	80 e1       	ldi	r24, 0x10	; 16
     26e:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
	DIO_Writepin(FIRST_OUT_Pin + 1  , HIGH);
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	81 e1       	ldi	r24, 0x11	; 17
     276:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
	DIO_Writepin(FIRST_OUT_Pin + 2  , HIGH);
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	82 e1       	ldi	r24, 0x12	; 18
     27e:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
	DIO_Writepin(FIRST_OUT_Pin + 3  , HIGH);
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	83 e1       	ldi	r24, 0x13	; 19
     286:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
};


uint8_t keypad_Data(void)
{
	uint8_t r , c , key = DEFAULT_KEY;
     28a:	0f 2e       	mov	r0, r31
     28c:	fe e2       	ldi	r31, 0x2E	; 46
     28e:	ff 2e       	mov	r15, r31
     290:	f0 2d       	mov	r31, r0
	DIO_Writepin(FIRST_OUT_Pin , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 1  , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 2  , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 3  , HIGH);
	
	for(r = 0; r < ROW; r++)
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	27 c0       	rjmp	.+78     	; 0x2e4 <keypad_Data+0x84>
	{
		DIO_Writepin(FIRST_OUT_Pin + r  , LOW);		// set one output pin to Low
     296:	00 e1       	ldi	r16, 0x10	; 16
     298:	01 0f       	add	r16, r17
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	80 2f       	mov	r24, r16
     29e:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
		for(c = 0; c < COLUMN; c++)
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	18 c0       	rjmp	.+48     	; 0x2d6 <keypad_Data+0x76>
		{
			if(!DIO_Readpin(FIRST_INP_Pin + c))		// if you press the button --> reverse the signal and when row x column = Low
     2a6:	c4 e1       	ldi	r28, 0x14	; 20
     2a8:	cd 0f       	add	r28, r29
     2aa:	8c 2f       	mov	r24, r28
     2ac:	0e 94 08 05 	call	0xa10	; 0xa10 <DIO_Readpin>
     2b0:	81 11       	cpse	r24, r1
     2b2:	10 c0       	rjmp	.+32     	; 0x2d4 <keypad_Data+0x74>
			{
				key = key_array[r][c];				
     2b4:	e1 2f       	mov	r30, r17
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	ee 0f       	add	r30, r30
     2ba:	ff 1f       	adc	r31, r31
     2bc:	ee 0f       	add	r30, r30
     2be:	ff 1f       	adc	r31, r31
     2c0:	eb 58       	subi	r30, 0x8B	; 139
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	ed 0f       	add	r30, r29
     2c6:	f1 1d       	adc	r31, r1
     2c8:	f0 80       	ld	r15, Z
				while(!DIO_Readpin(FIRST_INP_Pin + c));		// keep same signal as you still pressing the button
     2ca:	8c 2f       	mov	r24, r28
     2cc:	0e 94 08 05 	call	0xa10	; 0xa10 <DIO_Readpin>
     2d0:	88 23       	and	r24, r24
     2d2:	d9 f3       	breq	.-10     	; 0x2ca <keypad_Data+0x6a>
	DIO_Writepin(FIRST_OUT_Pin + 3  , HIGH);
	
	for(r = 0; r < ROW; r++)
	{
		DIO_Writepin(FIRST_OUT_Pin + r  , LOW);		// set one output pin to Low
		for(c = 0; c < COLUMN; c++)
     2d4:	df 5f       	subi	r29, 0xFF	; 255
     2d6:	d4 30       	cpi	r29, 0x04	; 4
     2d8:	30 f3       	brcs	.-52     	; 0x2a6 <keypad_Data+0x46>
			{
				key = key_array[r][c];				
				while(!DIO_Readpin(FIRST_INP_Pin + c));		// keep same signal as you still pressing the button
			}
		}
		DIO_Writepin(FIRST_OUT_Pin + r  , HIGH);	// reset one output pin to High again
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	80 2f       	mov	r24, r16
     2de:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
	DIO_Writepin(FIRST_OUT_Pin , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 1  , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 2  , HIGH);
	DIO_Writepin(FIRST_OUT_Pin + 3  , HIGH);
	
	for(r = 0; r < ROW; r++)
     2e2:	1f 5f       	subi	r17, 0xFF	; 255
     2e4:	14 30       	cpi	r17, 0x04	; 4
     2e6:	b8 f2       	brcs	.-82     	; 0x296 <keypad_Data+0x36>
			}
		}
		DIO_Writepin(FIRST_OUT_Pin + r  , HIGH);	// reset one output pin to High again
	}
	return key;
}
     2e8:	8f 2d       	mov	r24, r15
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	08 95       	ret

000002f6 <LCD_WriteCmd>:
	for(uint8_t i =0; i < n ; i++)
	{
		LCD_WriteData(' ');
		_delay_ms(1);
	}
}
     2f6:	cf 93       	push	r28
     2f8:	c8 2f       	mov	r28, r24
     2fa:	84 fb       	bst	r24, 4
     2fc:	66 27       	eor	r22, r22
     2fe:	60 f9       	bld	r22, 0
     300:	84 e0       	ldi	r24, 0x04	; 4
     302:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     306:	c5 fb       	bst	r28, 5
     308:	66 27       	eor	r22, r22
     30a:	60 f9       	bld	r22, 0
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     312:	c6 fb       	bst	r28, 6
     314:	66 27       	eor	r22, r22
     316:	60 f9       	bld	r22, 0
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     31e:	6c 2f       	mov	r22, r28
     320:	66 1f       	adc	r22, r22
     322:	66 27       	eor	r22, r22
     324:	66 1f       	adc	r22, r22
     326:	87 e0       	ldi	r24, 0x07	; 7
     328:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	88 e0       	ldi	r24, 0x08	; 8
     330:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	89 e0       	ldi	r24, 0x09	; 9
     338:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	8a e0       	ldi	r24, 0x0A	; 10
     340:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     344:	8f ec       	ldi	r24, 0xCF	; 207
     346:	97 e0       	ldi	r25, 0x07	; 7
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_WriteCmd+0x52>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_WriteCmd+0x58>
     34e:	00 00       	nop
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	8a e0       	ldi	r24, 0x0A	; 10
     354:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     358:	6c 2f       	mov	r22, r28
     35a:	61 70       	andi	r22, 0x01	; 1
     35c:	84 e0       	ldi	r24, 0x04	; 4
     35e:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     362:	c1 fb       	bst	r28, 1
     364:	66 27       	eor	r22, r22
     366:	60 f9       	bld	r22, 0
     368:	85 e0       	ldi	r24, 0x05	; 5
     36a:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     36e:	c2 fb       	bst	r28, 2
     370:	66 27       	eor	r22, r22
     372:	60 f9       	bld	r22, 0
     374:	86 e0       	ldi	r24, 0x06	; 6
     376:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     37a:	c3 fb       	bst	r28, 3
     37c:	66 27       	eor	r22, r22
     37e:	60 f9       	bld	r22, 0
     380:	87 e0       	ldi	r24, 0x07	; 7
     382:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	88 e0       	ldi	r24, 0x08	; 8
     38a:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	89 e0       	ldi	r24, 0x09	; 9
     392:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	8a e0       	ldi	r24, 0x0A	; 10
     39a:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     39e:	8f ec       	ldi	r24, 0xCF	; 207
     3a0:	97 e0       	ldi	r25, 0x07	; 7
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_WriteCmd+0xac>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_WriteCmd+0xb2>
     3a8:	00 00       	nop
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     3b2:	8f e0       	ldi	r24, 0x0F	; 15
     3b4:	97 e2       	ldi	r25, 0x27	; 39
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCD_WriteCmd+0xc0>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_WriteCmd+0xc6>
     3bc:	00 00       	nop
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <LCD_Init>:
     3c2:	8f e3       	ldi	r24, 0x3F	; 63
     3c4:	9c e9       	ldi	r25, 0x9C	; 156
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD_Init+0x4>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD_Init+0xa>
     3cc:	00 00       	nop
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteCmd>
     3d4:	8f ec       	ldi	r24, 0xCF	; 207
     3d6:	97 e0       	ldi	r25, 0x07	; 7
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCD_Init+0x16>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCD_Init+0x1c>
     3de:	00 00       	nop
     3e0:	88 e2       	ldi	r24, 0x28	; 40
     3e2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteCmd>
     3e6:	8f ec       	ldi	r24, 0xCF	; 207
     3e8:	97 e0       	ldi	r25, 0x07	; 7
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_Init+0x28>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_Init+0x2e>
     3f0:	00 00       	nop
     3f2:	8c e0       	ldi	r24, 0x0C	; 12
     3f4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteCmd>
     3f8:	8f ec       	ldi	r24, 0xCF	; 207
     3fa:	97 e0       	ldi	r25, 0x07	; 7
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_Init+0x3a>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteCmd>
     40a:	8f e9       	ldi	r24, 0x9F	; 159
     40c:	9f e0       	ldi	r25, 0x0F	; 15
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     414:	00 00       	nop
     416:	86 e0       	ldi	r24, 0x06	; 6
     418:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteCmd>
     41c:	8f ec       	ldi	r24, 0xCF	; 207
     41e:	97 e0       	ldi	r25, 0x07	; 7
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     426:	00 00       	nop
     428:	80 e8       	ldi	r24, 0x80	; 128
     42a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteCmd>
     42e:	08 95       	ret

00000430 <LCD_WriteData>:
     430:	cf 93       	push	r28
     432:	c8 2f       	mov	r28, r24
     434:	84 fb       	bst	r24, 4
     436:	66 27       	eor	r22, r22
     438:	60 f9       	bld	r22, 0
     43a:	84 e0       	ldi	r24, 0x04	; 4
     43c:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     440:	c5 fb       	bst	r28, 5
     442:	66 27       	eor	r22, r22
     444:	60 f9       	bld	r22, 0
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     44c:	c6 fb       	bst	r28, 6
     44e:	66 27       	eor	r22, r22
     450:	60 f9       	bld	r22, 0
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     458:	6c 2f       	mov	r22, r28
     45a:	66 1f       	adc	r22, r22
     45c:	66 27       	eor	r22, r22
     45e:	66 1f       	adc	r22, r22
     460:	87 e0       	ldi	r24, 0x07	; 7
     462:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	88 e0       	ldi	r24, 0x08	; 8
     46a:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	89 e0       	ldi	r24, 0x09	; 9
     472:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	8a e0       	ldi	r24, 0x0A	; 10
     47a:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     47e:	8f ec       	ldi	r24, 0xCF	; 207
     480:	97 e0       	ldi	r25, 0x07	; 7
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <LCD_WriteData+0x52>
     486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_WriteData+0x58>
     488:	00 00       	nop
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	8a e0       	ldi	r24, 0x0A	; 10
     48e:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     492:	6c 2f       	mov	r22, r28
     494:	61 70       	andi	r22, 0x01	; 1
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     49c:	c1 fb       	bst	r28, 1
     49e:	66 27       	eor	r22, r22
     4a0:	60 f9       	bld	r22, 0
     4a2:	85 e0       	ldi	r24, 0x05	; 5
     4a4:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     4a8:	c2 fb       	bst	r28, 2
     4aa:	66 27       	eor	r22, r22
     4ac:	60 f9       	bld	r22, 0
     4ae:	86 e0       	ldi	r24, 0x06	; 6
     4b0:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     4b4:	c3 fb       	bst	r28, 3
     4b6:	66 27       	eor	r22, r22
     4b8:	60 f9       	bld	r22, 0
     4ba:	87 e0       	ldi	r24, 0x07	; 7
     4bc:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	88 e0       	ldi	r24, 0x08	; 8
     4c4:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	89 e0       	ldi	r24, 0x09	; 9
     4cc:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	8a e0       	ldi	r24, 0x0A	; 10
     4d4:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     4d8:	8f ec       	ldi	r24, 0xCF	; 207
     4da:	97 e0       	ldi	r25, 0x07	; 7
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <LCD_WriteData+0xac>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <LCD_WriteData+0xb2>
     4e2:	00 00       	nop
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	8a e0       	ldi	r24, 0x0A	; 10
     4e8:	0e 94 83 04 	call	0x906	; 0x906 <DIO_Writepin>
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <LCD_Clear>:
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteCmd>
     4f6:	8f ec       	ldi	r24, 0xCF	; 207
     4f8:	97 e0       	ldi	r25, 0x07	; 7
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_Clear+0xa>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_Clear+0x10>
     500:	00 00       	nop
     502:	08 95       	ret

00000504 <LCD_GOTO>:
     504:	88 23       	and	r24, r24
     506:	29 f0       	breq	.+10     	; 0x512 <LCD_GOTO+0xe>
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	31 f0       	breq	.+12     	; 0x518 <LCD_GOTO+0x14>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	05 c0       	rjmp	.+10     	; 0x51c <LCD_GOTO+0x18>
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	02 c0       	rjmp	.+4      	; 0x51c <LCD_GOTO+0x18>
     518:	80 ec       	ldi	r24, 0xC0	; 192
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	60 31       	cpi	r22, 0x10	; 16
     51e:	10 f4       	brcc	.+4      	; 0x524 <LCD_GOTO+0x20>
     520:	86 0f       	add	r24, r22
     522:	91 1d       	adc	r25, r1
     524:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteCmd>
     528:	08 95       	ret

0000052a <LCD_WriteChar>:
     52a:	0e 94 18 02 	call	0x430	; 0x430 <LCD_WriteData>
     52e:	8f ec       	ldi	r24, 0xCF	; 207
     530:	97 e0       	ldi	r25, 0x07	; 7
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <LCD_WriteChar+0x8>
     536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_WriteChar+0xe>
     538:	00 00       	nop
     53a:	08 95       	ret

0000053c <LCD_WriteString>:
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	8c 01       	movw	r16, r24
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	09 c0       	rjmp	.+18     	; 0x55a <LCD_WriteString+0x1e>
     548:	0e 94 18 02 	call	0x430	; 0x430 <LCD_WriteData>
     54c:	8f ec       	ldi	r24, 0xCF	; 207
     54e:	97 e0       	ldi	r25, 0x07	; 7
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <LCD_WriteString+0x14>
     554:	00 c0       	rjmp	.+0      	; 0x556 <LCD_WriteString+0x1a>
     556:	00 00       	nop
     558:	cf 5f       	subi	r28, 0xFF	; 255
     55a:	f8 01       	movw	r30, r16
     55c:	ec 0f       	add	r30, r28
     55e:	f1 1d       	adc	r31, r1
     560:	80 81       	ld	r24, Z
     562:	81 11       	cpse	r24, r1
     564:	f1 cf       	rjmp	.-30     	; 0x548 <LCD_WriteString+0xc>
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	08 95       	ret

0000056e <LCD_WriteNumber>:

/*----------------  Function used to Write Real Number  --------------------*/

void LCD_WriteNumber(float Number)
{
     56e:	8f 92       	push	r8
     570:	9f 92       	push	r9
     572:	af 92       	push	r10
     574:	bf 92       	push	r11
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	60 97       	sbiw	r28, 0x10	; 16
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	4b 01       	movw	r8, r22
     592:	5c 01       	movw	r10, r24
	uint8_t i=0,arr[16];
	if(Number==0)
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	a9 01       	movw	r20, r18
     59a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__cmpsf2>
     59e:	81 11       	cpse	r24, r1
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <LCD_WriteNumber+0x3a>
	LCD_WriteData('0');
     5a2:	80 e3       	ldi	r24, 0x30	; 48
     5a4:	0e 94 18 02 	call	0x430	; 0x430 <LCD_WriteData>
	
	if (Number<0)
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	a9 01       	movw	r20, r18
     5ae:	c5 01       	movw	r24, r10
     5b0:	b4 01       	movw	r22, r8
     5b2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__cmpsf2>
     5b6:	88 23       	and	r24, r24
     5b8:	3c f4       	brge	.+14     	; 0x5c8 <LCD_WriteNumber+0x5a>
	{
		Number=Number*-1;
     5ba:	b7 fa       	bst	r11, 7
     5bc:	b0 94       	com	r11
     5be:	b7 f8       	bld	r11, 7
     5c0:	b0 94       	com	r11
		LCD_WriteData('-');
     5c2:	8d e2       	ldi	r24, 0x2D	; 45
     5c4:	0e 94 18 02 	call	0x430	; 0x430 <LCD_WriteData>
	}
	int int_num=Number;	// integer part
     5c8:	c5 01       	movw	r24, r10
     5ca:	b4 01       	movw	r22, r8
     5cc:	0e 94 76 06 	call	0xcec	; 0xcec <__fixsfsi>
     5d0:	7b 01       	movw	r14, r22
	float fra_num=Number-int_num; // fraction part
     5d2:	07 2e       	mov	r0, r23
     5d4:	00 0c       	add	r0, r0
     5d6:	88 0b       	sbc	r24, r24
     5d8:	99 0b       	sbc	r25, r25
     5da:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatsisf>
     5de:	9b 01       	movw	r18, r22
     5e0:	ac 01       	movw	r20, r24
     5e2:	c5 01       	movw	r24, r10
     5e4:	b4 01       	movw	r22, r8
     5e6:	0e 94 92 05 	call	0xb24	; 0xb24 <__subsf3>
     5ea:	4b 01       	movw	r8, r22
     5ec:	5c 01       	movw	r10, r24

/*----------------  Function used to Write Real Number  --------------------*/

void LCD_WriteNumber(float Number)
{
	uint8_t i=0,arr[16];
     5ee:	10 e0       	ldi	r17, 0x00	; 0
		LCD_WriteData('-');
	}
	int int_num=Number;	// integer part
	float fra_num=Number-int_num; // fraction part
	
		while(int_num)
     5f0:	10 c0       	rjmp	.+32     	; 0x612 <LCD_WriteNumber+0xa4>
		{
			arr[i]=int_num%10 +'0';
     5f2:	c7 01       	movw	r24, r14
     5f4:	6a e0       	ldi	r22, 0x0A	; 10
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	0e 94 cb 07 	call	0xf96	; 0xf96 <__divmodhi4>
     5fc:	e1 e0       	ldi	r30, 0x01	; 1
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	ec 0f       	add	r30, r28
     602:	fd 1f       	adc	r31, r29
     604:	e1 0f       	add	r30, r17
     606:	f1 1d       	adc	r31, r1
     608:	80 5d       	subi	r24, 0xD0	; 208
     60a:	80 83       	st	Z, r24
			int_num/=10;
     60c:	e6 2e       	mov	r14, r22
     60e:	f7 2e       	mov	r15, r23
			i++;
     610:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_WriteData('-');
	}
	int int_num=Number;	// integer part
	float fra_num=Number-int_num; // fraction part
	
		while(int_num)
     612:	e1 14       	cp	r14, r1
     614:	f1 04       	cpc	r15, r1
     616:	69 f7       	brne	.-38     	; 0x5f2 <LCD_WriteNumber+0x84>
     618:	0d c0       	rjmp	.+26     	; 0x634 <LCD_WriteNumber+0xc6>
			i++;
		}
		// write array content (Number ) --> start writing from the biggest digit
		for(;i>0;i--)
		{
			LCD_WriteData(arr[i-1]);
     61a:	e1 2f       	mov	r30, r17
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	2c 0f       	add	r18, r28
     626:	3d 1f       	adc	r19, r29
     628:	e2 0f       	add	r30, r18
     62a:	f3 1f       	adc	r31, r19
     62c:	80 81       	ld	r24, Z
     62e:	0e 94 18 02 	call	0x430	; 0x430 <LCD_WriteData>
			arr[i]=int_num%10 +'0';
			int_num/=10;
			i++;
		}
		// write array content (Number ) --> start writing from the biggest digit
		for(;i>0;i--)
     632:	11 50       	subi	r17, 0x01	; 1
     634:	11 11       	cpse	r17, r1
     636:	f1 cf       	rjmp	.-30     	; 0x61a <LCD_WriteNumber+0xac>
		{
			LCD_WriteData(arr[i-1]);
		}
		if (fra_num!=0)
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	a9 01       	movw	r20, r18
     63e:	c5 01       	movw	r24, r10
     640:	b4 01       	movw	r22, r8
     642:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__cmpsf2>
     646:	88 23       	and	r24, r24
     648:	09 f4       	brne	.+2      	; 0x64c <LCD_WriteNumber+0xde>
     64a:	4f c0       	rjmp	.+158    	; 0x6ea <LCD_WriteNumber+0x17c>
		{
			LCD_WriteData('.');
     64c:	8e e2       	ldi	r24, 0x2E	; 46
     64e:	0e 94 18 02 	call	0x430	; 0x430 <LCD_WriteData>
			i=0;
			uint16_t int_num1;
			int_num1=fra_num*1000;
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	4a e7       	ldi	r20, 0x7A	; 122
     658:	54 e4       	ldi	r21, 0x44	; 68
     65a:	c5 01       	movw	r24, r10
     65c:	b4 01       	movw	r22, r8
     65e:	0e 94 5e 07 	call	0xebc	; 0xebc <__mulsf3>
     662:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fixunssfsi>
     666:	ab 01       	movw	r20, r22
			while(int_num1)
     668:	2d c0       	rjmp	.+90     	; 0x6c4 <LCD_WriteNumber+0x156>
			{
				arr[i]=int_num1%10 +'0';
     66a:	9a 01       	movw	r18, r20
     66c:	ad ec       	ldi	r26, 0xCD	; 205
     66e:	bc ec       	ldi	r27, 0xCC	; 204
     670:	0e 94 df 07 	call	0xfbe	; 0xfbe <__umulhisi3>
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	96 95       	lsr	r25
     67e:	87 95       	ror	r24
     680:	9c 01       	movw	r18, r24
     682:	22 0f       	add	r18, r18
     684:	33 1f       	adc	r19, r19
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	88 0f       	add	r24, r24
     690:	99 1f       	adc	r25, r25
     692:	82 0f       	add	r24, r18
     694:	93 1f       	adc	r25, r19
     696:	9a 01       	movw	r18, r20
     698:	28 1b       	sub	r18, r24
     69a:	39 0b       	sbc	r19, r25
     69c:	c9 01       	movw	r24, r18
     69e:	e1 e0       	ldi	r30, 0x01	; 1
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	ec 0f       	add	r30, r28
     6a4:	fd 1f       	adc	r31, r29
     6a6:	e1 0f       	add	r30, r17
     6a8:	f1 1d       	adc	r31, r1
     6aa:	80 5d       	subi	r24, 0xD0	; 208
     6ac:	80 83       	st	Z, r24
				int_num1/=10;
     6ae:	9a 01       	movw	r18, r20
     6b0:	0e 94 df 07 	call	0xfbe	; 0xfbe <__umulhisi3>
     6b4:	ac 01       	movw	r20, r24
     6b6:	56 95       	lsr	r21
     6b8:	47 95       	ror	r20
     6ba:	56 95       	lsr	r21
     6bc:	47 95       	ror	r20
     6be:	56 95       	lsr	r21
     6c0:	47 95       	ror	r20
				i++;
     6c2:	1f 5f       	subi	r17, 0xFF	; 255
		{
			LCD_WriteData('.');
			i=0;
			uint16_t int_num1;
			int_num1=fra_num*1000;
			while(int_num1)
     6c4:	41 15       	cp	r20, r1
     6c6:	51 05       	cpc	r21, r1
     6c8:	81 f6       	brne	.-96     	; 0x66a <LCD_WriteNumber+0xfc>
     6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <LCD_WriteNumber+0x178>
				i++;
			}
			// write array content (Number ) --> start writing from the biggest digit
			for(;i>0;i--)
			{
				LCD_WriteData(arr[i-1]);
     6cc:	e1 2f       	mov	r30, r17
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	31 97       	sbiw	r30, 0x01	; 1
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	8c 0f       	add	r24, r28
     6d8:	9d 1f       	adc	r25, r29
     6da:	e8 0f       	add	r30, r24
     6dc:	f9 1f       	adc	r31, r25
     6de:	80 81       	ld	r24, Z
     6e0:	0e 94 18 02 	call	0x430	; 0x430 <LCD_WriteData>
				arr[i]=int_num1%10 +'0';
				int_num1/=10;
				i++;
			}
			// write array content (Number ) --> start writing from the biggest digit
			for(;i>0;i--)
     6e4:	11 50       	subi	r17, 0x01	; 1
     6e6:	11 11       	cpse	r17, r1
     6e8:	f1 cf       	rjmp	.-30     	; 0x6cc <LCD_WriteNumber+0x15e>
			{
				LCD_WriteData(arr[i-1]);
			}
		}	
}
     6ea:	60 96       	adiw	r28, 0x10	; 16
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	9f 90       	pop	r9
     706:	8f 90       	pop	r8
     708:	08 95       	ret

0000070a <main>:


				/*-------------------------- The Main Function ----------------------------*/
int main(void)
{
	Calculator_call();
     70a:	0e 94 88 00 	call	0x110	; 0x110 <Calculator_call>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	08 95       	ret

00000714 <DIO_Initpin>:
		{
			DIO_Initpin(i,status);
		}
		break;
	}
}
     714:	98 2f       	mov	r25, r24
     716:	96 95       	lsr	r25
     718:	96 95       	lsr	r25
     71a:	96 95       	lsr	r25
     71c:	87 70       	andi	r24, 0x07	; 7
     71e:	61 30       	cpi	r22, 0x01	; 1
     720:	31 f0       	breq	.+12     	; 0x72e <DIO_Initpin+0x1a>
     722:	08 f4       	brcc	.+2      	; 0x726 <DIO_Initpin+0x12>
     724:	54 c0       	rjmp	.+168    	; 0x7ce <DIO_Initpin+0xba>
     726:	62 30       	cpi	r22, 0x02	; 2
     728:	09 f4       	brne	.+2      	; 0x72c <DIO_Initpin+0x18>
     72a:	a1 c0       	rjmp	.+322    	; 0x86e <__stack+0xf>
     72c:	08 95       	ret
     72e:	91 30       	cpi	r25, 0x01	; 1
     730:	c1 f0       	breq	.+48     	; 0x762 <DIO_Initpin+0x4e>
     732:	28 f0       	brcs	.+10     	; 0x73e <DIO_Initpin+0x2a>
     734:	92 30       	cpi	r25, 0x02	; 2
     736:	39 f1       	breq	.+78     	; 0x786 <DIO_Initpin+0x72>
     738:	93 30       	cpi	r25, 0x03	; 3
     73a:	b9 f1       	breq	.+110    	; 0x7aa <DIO_Initpin+0x96>
     73c:	08 95       	ret
     73e:	4a b3       	in	r20, 0x1a	; 26
     740:	21 e0       	ldi	r18, 0x01	; 1
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	b9 01       	movw	r22, r18
     746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_Initpin+0x38>
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	8a 95       	dec	r24
     74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_Initpin+0x34>
     750:	cb 01       	movw	r24, r22
     752:	96 2f       	mov	r25, r22
     754:	90 95       	com	r25
     756:	94 23       	and	r25, r20
     758:	9a bb       	out	0x1a, r25	; 26
     75a:	9b b3       	in	r25, 0x1b	; 27
     75c:	89 2b       	or	r24, r25
     75e:	8b bb       	out	0x1b, r24	; 27
     760:	08 95       	ret
     762:	47 b3       	in	r20, 0x17	; 23
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	b9 01       	movw	r22, r18
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_Initpin+0x5c>
     76c:	66 0f       	add	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	8a 95       	dec	r24
     772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_Initpin+0x58>
     774:	cb 01       	movw	r24, r22
     776:	96 2f       	mov	r25, r22
     778:	90 95       	com	r25
     77a:	94 23       	and	r25, r20
     77c:	97 bb       	out	0x17, r25	; 23
     77e:	98 b3       	in	r25, 0x18	; 24
     780:	89 2b       	or	r24, r25
     782:	88 bb       	out	0x18, r24	; 24
     784:	08 95       	ret
     786:	44 b3       	in	r20, 0x14	; 20
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	b9 01       	movw	r22, r18
     78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_Initpin+0x80>
     790:	66 0f       	add	r22, r22
     792:	77 1f       	adc	r23, r23
     794:	8a 95       	dec	r24
     796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_Initpin+0x7c>
     798:	cb 01       	movw	r24, r22
     79a:	96 2f       	mov	r25, r22
     79c:	90 95       	com	r25
     79e:	94 23       	and	r25, r20
     7a0:	94 bb       	out	0x14, r25	; 20
     7a2:	95 b3       	in	r25, 0x15	; 21
     7a4:	89 2b       	or	r24, r25
     7a6:	85 bb       	out	0x15, r24	; 21
     7a8:	08 95       	ret
     7aa:	41 b3       	in	r20, 0x11	; 17
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	b9 01       	movw	r22, r18
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_Initpin+0xa4>
     7b4:	66 0f       	add	r22, r22
     7b6:	77 1f       	adc	r23, r23
     7b8:	8a 95       	dec	r24
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_Initpin+0xa0>
     7bc:	cb 01       	movw	r24, r22
     7be:	96 2f       	mov	r25, r22
     7c0:	90 95       	com	r25
     7c2:	94 23       	and	r25, r20
     7c4:	91 bb       	out	0x11, r25	; 17
     7c6:	92 b3       	in	r25, 0x12	; 18
     7c8:	89 2b       	or	r24, r25
     7ca:	82 bb       	out	0x12, r24	; 18
     7cc:	08 95       	ret
     7ce:	91 30       	cpi	r25, 0x01	; 1
     7d0:	c1 f0       	breq	.+48     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7d2:	28 f0       	brcs	.+10     	; 0x7de <DIO_Initpin+0xca>
     7d4:	92 30       	cpi	r25, 0x02	; 2
     7d6:	39 f1       	breq	.+78     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     7d8:	93 30       	cpi	r25, 0x03	; 3
     7da:	b9 f1       	breq	.+110    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     7dc:	08 95       	ret
     7de:	4a b3       	in	r20, 0x1a	; 26
     7e0:	21 e0       	ldi	r18, 0x01	; 1
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	b9 01       	movw	r22, r18
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_Initpin+0xd8>
     7e8:	66 0f       	add	r22, r22
     7ea:	77 1f       	adc	r23, r23
     7ec:	8a 95       	dec	r24
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_Initpin+0xd4>
     7f0:	cb 01       	movw	r24, r22
     7f2:	80 95       	com	r24
     7f4:	94 2f       	mov	r25, r20
     7f6:	98 23       	and	r25, r24
     7f8:	9a bb       	out	0x1a, r25	; 26
     7fa:	9b b3       	in	r25, 0x1b	; 27
     7fc:	89 23       	and	r24, r25
     7fe:	8b bb       	out	0x1b, r24	; 27
     800:	08 95       	ret
     802:	47 b3       	in	r20, 0x17	; 23
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	b9 01       	movw	r22, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	8a 95       	dec	r24
     812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     814:	cb 01       	movw	r24, r22
     816:	80 95       	com	r24
     818:	94 2f       	mov	r25, r20
     81a:	98 23       	and	r25, r24
     81c:	97 bb       	out	0x17, r25	; 23
     81e:	98 b3       	in	r25, 0x18	; 24
     820:	89 23       	and	r24, r25
     822:	88 bb       	out	0x18, r24	; 24
     824:	08 95       	ret
     826:	44 b3       	in	r20, 0x14	; 20
     828:	21 e0       	ldi	r18, 0x01	; 1
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	b9 01       	movw	r22, r18
     82e:	02 c0       	rjmp	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     830:	66 0f       	add	r22, r22
     832:	77 1f       	adc	r23, r23
     834:	8a 95       	dec	r24
     836:	e2 f7       	brpl	.-8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     838:	cb 01       	movw	r24, r22
     83a:	80 95       	com	r24
     83c:	94 2f       	mov	r25, r20
     83e:	98 23       	and	r25, r24
     840:	94 bb       	out	0x14, r25	; 20
     842:	95 b3       	in	r25, 0x15	; 21
     844:	89 23       	and	r24, r25
     846:	85 bb       	out	0x15, r24	; 21
     848:	08 95       	ret
     84a:	41 b3       	in	r20, 0x11	; 17
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	b9 01       	movw	r22, r18
     852:	02 c0       	rjmp	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     854:	66 0f       	add	r22, r22
     856:	77 1f       	adc	r23, r23
     858:	8a 95       	dec	r24
     85a:	e2 f7       	brpl	.-8      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     85c:	cb 01       	movw	r24, r22
     85e:	80 95       	com	r24
     860:	94 2f       	mov	r25, r20
     862:	98 23       	and	r25, r24
     864:	91 bb       	out	0x11, r25	; 17
     866:	92 b3       	in	r25, 0x12	; 18
     868:	89 23       	and	r24, r25
     86a:	82 bb       	out	0x12, r24	; 18
     86c:	08 95       	ret
     86e:	91 30       	cpi	r25, 0x01	; 1
     870:	99 f0       	breq	.+38     	; 0x898 <__stack+0x39>
     872:	28 f0       	brcs	.+10     	; 0x87e <__stack+0x1f>
     874:	92 30       	cpi	r25, 0x02	; 2
     876:	e9 f0       	breq	.+58     	; 0x8b2 <__stack+0x53>
     878:	93 30       	cpi	r25, 0x03	; 3
     87a:	41 f1       	breq	.+80     	; 0x8cc <__stack+0x6d>
     87c:	08 95       	ret
     87e:	4a b3       	in	r20, 0x1a	; 26
     880:	21 e0       	ldi	r18, 0x01	; 1
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	b9 01       	movw	r22, r18
     886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
     888:	66 0f       	add	r22, r22
     88a:	77 1f       	adc	r23, r23
     88c:	8a 95       	dec	r24
     88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
     890:	cb 01       	movw	r24, r22
     892:	84 2b       	or	r24, r20
     894:	8a bb       	out	0x1a, r24	; 26
     896:	08 95       	ret
     898:	47 b3       	in	r20, 0x17	; 23
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	b9 01       	movw	r22, r18
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
     8a2:	66 0f       	add	r22, r22
     8a4:	77 1f       	adc	r23, r23
     8a6:	8a 95       	dec	r24
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
     8aa:	cb 01       	movw	r24, r22
     8ac:	84 2b       	or	r24, r20
     8ae:	87 bb       	out	0x17, r24	; 23
     8b0:	08 95       	ret
     8b2:	44 b3       	in	r20, 0x14	; 20
     8b4:	21 e0       	ldi	r18, 0x01	; 1
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	b9 01       	movw	r22, r18
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
     8bc:	66 0f       	add	r22, r22
     8be:	77 1f       	adc	r23, r23
     8c0:	8a 95       	dec	r24
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	cb 01       	movw	r24, r22
     8c6:	84 2b       	or	r24, r20
     8c8:	84 bb       	out	0x14, r24	; 20
     8ca:	08 95       	ret
     8cc:	41 b3       	in	r20, 0x11	; 17
     8ce:	21 e0       	ldi	r18, 0x01	; 1
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	b9 01       	movw	r22, r18
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
     8d6:	66 0f       	add	r22, r22
     8d8:	77 1f       	adc	r23, r23
     8da:	8a 95       	dec	r24
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
     8de:	cb 01       	movw	r24, r22
     8e0:	84 2b       	or	r24, r20
     8e2:	81 bb       	out	0x11, r24	; 17
     8e4:	08 95       	ret

000008e6 <Init_Pins>:
     8e6:	cf 93       	push	r28
     8e8:	c0 e0       	ldi	r28, 0x00	; 0
     8ea:	09 c0       	rjmp	.+18     	; 0x8fe <Init_Pins+0x18>
     8ec:	ec 2f       	mov	r30, r28
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	eb 57       	subi	r30, 0x7B	; 123
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	60 81       	ld	r22, Z
     8f6:	8c 2f       	mov	r24, r28
     8f8:	0e 94 8a 03 	call	0x714	; 0x714 <DIO_Initpin>
     8fc:	cf 5f       	subi	r28, 0xFF	; 255
     8fe:	c0 32       	cpi	r28, 0x20	; 32
     900:	a8 f3       	brcs	.-22     	; 0x8ec <Init_Pins+0x6>
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
     906:	98 2f       	mov	r25, r24
     908:	96 95       	lsr	r25
     90a:	96 95       	lsr	r25
     90c:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
     90e:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
     910:	61 30       	cpi	r22, 0x01	; 1
     912:	e1 f5       	brne	.+120    	; 0x98c <DIO_Writepin+0x86>
		
		switch(port){
     914:	91 30       	cpi	r25, 0x01	; 1
     916:	99 f0       	breq	.+38     	; 0x93e <DIO_Writepin+0x38>
     918:	28 f0       	brcs	.+10     	; 0x924 <DIO_Writepin+0x1e>
     91a:	92 30       	cpi	r25, 0x02	; 2
     91c:	e9 f0       	breq	.+58     	; 0x958 <DIO_Writepin+0x52>
     91e:	93 30       	cpi	r25, 0x03	; 3
     920:	41 f1       	breq	.+80     	; 0x972 <DIO_Writepin+0x6c>
     922:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
     924:	4b b3       	in	r20, 0x1b	; 27
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	b9 01       	movw	r22, r18
     92c:	02 c0       	rjmp	.+4      	; 0x932 <DIO_Writepin+0x2c>
     92e:	66 0f       	add	r22, r22
     930:	77 1f       	adc	r23, r23
     932:	8a 95       	dec	r24
     934:	e2 f7       	brpl	.-8      	; 0x92e <DIO_Writepin+0x28>
     936:	cb 01       	movw	r24, r22
     938:	84 2b       	or	r24, r20
     93a:	8b bb       	out	0x1b, r24	; 27
			break;
     93c:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
     93e:	48 b3       	in	r20, 0x18	; 24
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	b9 01       	movw	r22, r18
     946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_Writepin+0x46>
     948:	66 0f       	add	r22, r22
     94a:	77 1f       	adc	r23, r23
     94c:	8a 95       	dec	r24
     94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_Writepin+0x42>
     950:	cb 01       	movw	r24, r22
     952:	84 2b       	or	r24, r20
     954:	88 bb       	out	0x18, r24	; 24
			break;
     956:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
     958:	45 b3       	in	r20, 0x15	; 21
     95a:	21 e0       	ldi	r18, 0x01	; 1
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	b9 01       	movw	r22, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <DIO_Writepin+0x60>
     962:	66 0f       	add	r22, r22
     964:	77 1f       	adc	r23, r23
     966:	8a 95       	dec	r24
     968:	e2 f7       	brpl	.-8      	; 0x962 <DIO_Writepin+0x5c>
     96a:	cb 01       	movw	r24, r22
     96c:	84 2b       	or	r24, r20
     96e:	85 bb       	out	0x15, r24	; 21
			break;
     970:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
     972:	42 b3       	in	r20, 0x12	; 18
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	b9 01       	movw	r22, r18
     97a:	02 c0       	rjmp	.+4      	; 0x980 <DIO_Writepin+0x7a>
     97c:	66 0f       	add	r22, r22
     97e:	77 1f       	adc	r23, r23
     980:	8a 95       	dec	r24
     982:	e2 f7       	brpl	.-8      	; 0x97c <DIO_Writepin+0x76>
     984:	cb 01       	movw	r24, r22
     986:	84 2b       	or	r24, r20
     988:	82 bb       	out	0x12, r24	; 18
			break;
     98a:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
     98c:	61 11       	cpse	r22, r1
     98e:	3f c0       	rjmp	.+126    	; 0xa0e <DIO_Writepin+0x108>
		switch(port){
     990:	91 30       	cpi	r25, 0x01	; 1
     992:	a1 f0       	breq	.+40     	; 0x9bc <DIO_Writepin+0xb6>
     994:	28 f0       	brcs	.+10     	; 0x9a0 <DIO_Writepin+0x9a>
     996:	92 30       	cpi	r25, 0x02	; 2
     998:	f9 f0       	breq	.+62     	; 0x9d8 <DIO_Writepin+0xd2>
     99a:	93 30       	cpi	r25, 0x03	; 3
     99c:	59 f1       	breq	.+86     	; 0x9f4 <DIO_Writepin+0xee>
     99e:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
     9a0:	4b b3       	in	r20, 0x1b	; 27
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	b9 01       	movw	r22, r18
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_Writepin+0xa8>
     9aa:	66 0f       	add	r22, r22
     9ac:	77 1f       	adc	r23, r23
     9ae:	8a 95       	dec	r24
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_Writepin+0xa4>
     9b2:	cb 01       	movw	r24, r22
     9b4:	80 95       	com	r24
     9b6:	84 23       	and	r24, r20
     9b8:	8b bb       	out	0x1b, r24	; 27
			break;
     9ba:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
     9bc:	48 b3       	in	r20, 0x18	; 24
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	b9 01       	movw	r22, r18
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <DIO_Writepin+0xc4>
     9c6:	66 0f       	add	r22, r22
     9c8:	77 1f       	adc	r23, r23
     9ca:	8a 95       	dec	r24
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <DIO_Writepin+0xc0>
     9ce:	cb 01       	movw	r24, r22
     9d0:	80 95       	com	r24
     9d2:	84 23       	and	r24, r20
     9d4:	88 bb       	out	0x18, r24	; 24
			break;
     9d6:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
     9d8:	45 b3       	in	r20, 0x15	; 21
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	b9 01       	movw	r22, r18
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <DIO_Writepin+0xe0>
     9e2:	66 0f       	add	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	8a 95       	dec	r24
     9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <DIO_Writepin+0xdc>
     9ea:	cb 01       	movw	r24, r22
     9ec:	80 95       	com	r24
     9ee:	84 23       	and	r24, r20
     9f0:	85 bb       	out	0x15, r24	; 21
			break;
     9f2:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
     9f4:	42 b3       	in	r20, 0x12	; 18
     9f6:	21 e0       	ldi	r18, 0x01	; 1
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	b9 01       	movw	r22, r18
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_Writepin+0xfc>
     9fe:	66 0f       	add	r22, r22
     a00:	77 1f       	adc	r23, r23
     a02:	8a 95       	dec	r24
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_Writepin+0xf8>
     a06:	cb 01       	movw	r24, r22
     a08:	80 95       	com	r24
     a0a:	84 23       	and	r24, r20
     a0c:	82 bb       	out	0x12, r24	; 18
     a0e:	08 95       	ret

00000a10 <DIO_Readpin>:

/*--------------------------- Function used to read pin value ----------------------------------*/

DIO_PIN_voltagetype DIO_Readpin(DIO_PIN_type pin){
	uint8_t res=0;
	DIO_Port_type port=pin/8;
     a10:	98 2f       	mov	r25, r24
     a12:	96 95       	lsr	r25
     a14:	96 95       	lsr	r25
     a16:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
     a18:	48 2f       	mov	r20, r24
     a1a:	47 70       	andi	r20, 0x07	; 7
	switch(port){
     a1c:	91 30       	cpi	r25, 0x01	; 1
     a1e:	81 f0       	breq	.+32     	; 0xa40 <DIO_Readpin+0x30>
     a20:	28 f0       	brcs	.+10     	; 0xa2c <DIO_Readpin+0x1c>
     a22:	92 30       	cpi	r25, 0x02	; 2
     a24:	b9 f0       	breq	.+46     	; 0xa54 <DIO_Readpin+0x44>
     a26:	93 30       	cpi	r25, 0x03	; 3
     a28:	f9 f0       	breq	.+62     	; 0xa68 <DIO_Readpin+0x58>
     a2a:	28 c0       	rjmp	.+80     	; 0xa7c <DIO_Readpin+0x6c>
		case PA:
		res= READ_BIT(PINA,pin_num);
     a2c:	99 b3       	in	r25, 0x19	; 25
     a2e:	89 2f       	mov	r24, r25
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_Readpin+0x28>
     a34:	95 95       	asr	r25
     a36:	87 95       	ror	r24
     a38:	4a 95       	dec	r20
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_Readpin+0x24>
     a3c:	81 70       	andi	r24, 0x01	; 1
		break;
     a3e:	08 95       	ret
		case PB:
		res= READ_BIT(PINB,pin_num);
     a40:	26 b3       	in	r18, 0x16	; 22
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	c9 01       	movw	r24, r18
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <DIO_Readpin+0x3c>
     a48:	95 95       	asr	r25
     a4a:	87 95       	ror	r24
     a4c:	4a 95       	dec	r20
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <DIO_Readpin+0x38>
     a50:	81 70       	andi	r24, 0x01	; 1
		break;
     a52:	08 95       	ret
		case PC:
		res=READ_BIT(PINC,pin_num);
     a54:	23 b3       	in	r18, 0x13	; 19
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	c9 01       	movw	r24, r18
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_Readpin+0x50>
     a5c:	95 95       	asr	r25
     a5e:	87 95       	ror	r24
     a60:	4a 95       	dec	r20
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_Readpin+0x4c>
     a64:	81 70       	andi	r24, 0x01	; 1
		break;
     a66:	08 95       	ret
		case PD:
		res=READ_BIT(PIND,pin_num);
     a68:	20 b3       	in	r18, 0x10	; 16
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	c9 01       	movw	r24, r18
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <DIO_Readpin+0x64>
     a70:	95 95       	asr	r25
     a72:	87 95       	ror	r24
     a74:	4a 95       	dec	r20
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <DIO_Readpin+0x60>
     a78:	81 70       	andi	r24, 0x01	; 1
		break;
     a7a:	08 95       	ret
}

/*--------------------------- Function used to read pin value ----------------------------------*/

DIO_PIN_voltagetype DIO_Readpin(DIO_PIN_type pin){
	uint8_t res=0;
     a7c:	80 e0       	ldi	r24, 0x00	; 0
		case PD:
		res=READ_BIT(PIND,pin_num);
		break;
	}
	return res;
}
     a7e:	08 95       	ret

00000a80 <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
     aa2:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <Fptr_EXI0>
     aa6:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <Fptr_EXI0+0x1>
     aaa:	30 97       	sbiw	r30, 0x00	; 0
     aac:	09 f0       	breq	.+2      	; 0xab0 <__vector_1+0x30>
		Fptr_EXI0();
     aae:	09 95       	icall
	}
}
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f 90       	pop	r0
     ace:	1f 90       	pop	r1
     ad0:	18 95       	reti

00000ad2 <__vector_2>:

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT1_vect){
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
     af4:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <__data_end>
     af8:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <__data_end+0x1>
     afc:	30 97       	sbiw	r30, 0x00	; 0
     afe:	09 f0       	breq	.+2      	; 0xb02 <__vector_2+0x30>
		Fptr_EXI1();
     b00:	09 95       	icall
	}
}
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__subsf3>:
     b24:	50 58       	subi	r21, 0x80	; 128

00000b26 <__addsf3>:
     b26:	bb 27       	eor	r27, r27
     b28:	aa 27       	eor	r26, r26
     b2a:	0e 94 aa 05 	call	0xb54	; 0xb54 <__addsf3x>
     b2e:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_round>
     b32:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_pscA>
     b36:	38 f0       	brcs	.+14     	; 0xb46 <__addsf3+0x20>
     b38:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_pscB>
     b3c:	20 f0       	brcs	.+8      	; 0xb46 <__addsf3+0x20>
     b3e:	39 f4       	brne	.+14     	; 0xb4e <__addsf3+0x28>
     b40:	9f 3f       	cpi	r25, 0xFF	; 255
     b42:	19 f4       	brne	.+6      	; 0xb4a <__addsf3+0x24>
     b44:	26 f4       	brtc	.+8      	; 0xb4e <__addsf3+0x28>
     b46:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_nan>
     b4a:	0e f4       	brtc	.+2      	; 0xb4e <__addsf3+0x28>
     b4c:	e0 95       	com	r30
     b4e:	e7 fb       	bst	r30, 7
     b50:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>

00000b54 <__addsf3x>:
     b54:	e9 2f       	mov	r30, r25
     b56:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fp_split3>
     b5a:	58 f3       	brcs	.-42     	; 0xb32 <__addsf3+0xc>
     b5c:	ba 17       	cp	r27, r26
     b5e:	62 07       	cpc	r22, r18
     b60:	73 07       	cpc	r23, r19
     b62:	84 07       	cpc	r24, r20
     b64:	95 07       	cpc	r25, r21
     b66:	20 f0       	brcs	.+8      	; 0xb70 <__addsf3x+0x1c>
     b68:	79 f4       	brne	.+30     	; 0xb88 <__addsf3x+0x34>
     b6a:	a6 f5       	brtc	.+104    	; 0xbd4 <__addsf3x+0x80>
     b6c:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_zero>
     b70:	0e f4       	brtc	.+2      	; 0xb74 <__addsf3x+0x20>
     b72:	e0 95       	com	r30
     b74:	0b 2e       	mov	r0, r27
     b76:	ba 2f       	mov	r27, r26
     b78:	a0 2d       	mov	r26, r0
     b7a:	0b 01       	movw	r0, r22
     b7c:	b9 01       	movw	r22, r18
     b7e:	90 01       	movw	r18, r0
     b80:	0c 01       	movw	r0, r24
     b82:	ca 01       	movw	r24, r20
     b84:	a0 01       	movw	r20, r0
     b86:	11 24       	eor	r1, r1
     b88:	ff 27       	eor	r31, r31
     b8a:	59 1b       	sub	r21, r25
     b8c:	99 f0       	breq	.+38     	; 0xbb4 <__addsf3x+0x60>
     b8e:	59 3f       	cpi	r21, 0xF9	; 249
     b90:	50 f4       	brcc	.+20     	; 0xba6 <__addsf3x+0x52>
     b92:	50 3e       	cpi	r21, 0xE0	; 224
     b94:	68 f1       	brcs	.+90     	; 0xbf0 <__addsf3x+0x9c>
     b96:	1a 16       	cp	r1, r26
     b98:	f0 40       	sbci	r31, 0x00	; 0
     b9a:	a2 2f       	mov	r26, r18
     b9c:	23 2f       	mov	r18, r19
     b9e:	34 2f       	mov	r19, r20
     ba0:	44 27       	eor	r20, r20
     ba2:	58 5f       	subi	r21, 0xF8	; 248
     ba4:	f3 cf       	rjmp	.-26     	; 0xb8c <__addsf3x+0x38>
     ba6:	46 95       	lsr	r20
     ba8:	37 95       	ror	r19
     baa:	27 95       	ror	r18
     bac:	a7 95       	ror	r26
     bae:	f0 40       	sbci	r31, 0x00	; 0
     bb0:	53 95       	inc	r21
     bb2:	c9 f7       	brne	.-14     	; 0xba6 <__addsf3x+0x52>
     bb4:	7e f4       	brtc	.+30     	; 0xbd4 <__addsf3x+0x80>
     bb6:	1f 16       	cp	r1, r31
     bb8:	ba 0b       	sbc	r27, r26
     bba:	62 0b       	sbc	r22, r18
     bbc:	73 0b       	sbc	r23, r19
     bbe:	84 0b       	sbc	r24, r20
     bc0:	ba f0       	brmi	.+46     	; 0xbf0 <__addsf3x+0x9c>
     bc2:	91 50       	subi	r25, 0x01	; 1
     bc4:	a1 f0       	breq	.+40     	; 0xbee <__addsf3x+0x9a>
     bc6:	ff 0f       	add	r31, r31
     bc8:	bb 1f       	adc	r27, r27
     bca:	66 1f       	adc	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	88 1f       	adc	r24, r24
     bd0:	c2 f7       	brpl	.-16     	; 0xbc2 <__addsf3x+0x6e>
     bd2:	0e c0       	rjmp	.+28     	; 0xbf0 <__addsf3x+0x9c>
     bd4:	ba 0f       	add	r27, r26
     bd6:	62 1f       	adc	r22, r18
     bd8:	73 1f       	adc	r23, r19
     bda:	84 1f       	adc	r24, r20
     bdc:	48 f4       	brcc	.+18     	; 0xbf0 <__addsf3x+0x9c>
     bde:	87 95       	ror	r24
     be0:	77 95       	ror	r23
     be2:	67 95       	ror	r22
     be4:	b7 95       	ror	r27
     be6:	f7 95       	ror	r31
     be8:	9e 3f       	cpi	r25, 0xFE	; 254
     bea:	08 f0       	brcs	.+2      	; 0xbee <__addsf3x+0x9a>
     bec:	b0 cf       	rjmp	.-160    	; 0xb4e <__addsf3+0x28>
     bee:	93 95       	inc	r25
     bf0:	88 0f       	add	r24, r24
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <__addsf3x+0xa2>
     bf4:	99 27       	eor	r25, r25
     bf6:	ee 0f       	add	r30, r30
     bf8:	97 95       	ror	r25
     bfa:	87 95       	ror	r24
     bfc:	08 95       	ret

00000bfe <__cmpsf2>:
     bfe:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fp_cmp>
     c02:	08 f4       	brcc	.+2      	; 0xc06 <__cmpsf2+0x8>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	08 95       	ret

00000c08 <__divsf3>:
     c08:	0e 94 18 06 	call	0xc30	; 0xc30 <__divsf3x>
     c0c:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_round>
     c10:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_pscB>
     c14:	58 f0       	brcs	.+22     	; 0xc2c <__divsf3+0x24>
     c16:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_pscA>
     c1a:	40 f0       	brcs	.+16     	; 0xc2c <__divsf3+0x24>
     c1c:	29 f4       	brne	.+10     	; 0xc28 <__divsf3+0x20>
     c1e:	5f 3f       	cpi	r21, 0xFF	; 255
     c20:	29 f0       	breq	.+10     	; 0xc2c <__divsf3+0x24>
     c22:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>
     c26:	51 11       	cpse	r21, r1
     c28:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>
     c2c:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_nan>

00000c30 <__divsf3x>:
     c30:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fp_split3>
     c34:	68 f3       	brcs	.-38     	; 0xc10 <__divsf3+0x8>

00000c36 <__divsf3_pse>:
     c36:	99 23       	and	r25, r25
     c38:	b1 f3       	breq	.-20     	; 0xc26 <__divsf3+0x1e>
     c3a:	55 23       	and	r21, r21
     c3c:	91 f3       	breq	.-28     	; 0xc22 <__divsf3+0x1a>
     c3e:	95 1b       	sub	r25, r21
     c40:	55 0b       	sbc	r21, r21
     c42:	bb 27       	eor	r27, r27
     c44:	aa 27       	eor	r26, r26
     c46:	62 17       	cp	r22, r18
     c48:	73 07       	cpc	r23, r19
     c4a:	84 07       	cpc	r24, r20
     c4c:	38 f0       	brcs	.+14     	; 0xc5c <__divsf3_pse+0x26>
     c4e:	9f 5f       	subi	r25, 0xFF	; 255
     c50:	5f 4f       	sbci	r21, 0xFF	; 255
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	44 1f       	adc	r20, r20
     c58:	aa 1f       	adc	r26, r26
     c5a:	a9 f3       	breq	.-22     	; 0xc46 <__divsf3_pse+0x10>
     c5c:	35 d0       	rcall	.+106    	; 0xcc8 <__divsf3_pse+0x92>
     c5e:	0e 2e       	mov	r0, r30
     c60:	3a f0       	brmi	.+14     	; 0xc70 <__divsf3_pse+0x3a>
     c62:	e0 e8       	ldi	r30, 0x80	; 128
     c64:	32 d0       	rcall	.+100    	; 0xcca <__divsf3_pse+0x94>
     c66:	91 50       	subi	r25, 0x01	; 1
     c68:	50 40       	sbci	r21, 0x00	; 0
     c6a:	e6 95       	lsr	r30
     c6c:	00 1c       	adc	r0, r0
     c6e:	ca f7       	brpl	.-14     	; 0xc62 <__divsf3_pse+0x2c>
     c70:	2b d0       	rcall	.+86     	; 0xcc8 <__divsf3_pse+0x92>
     c72:	fe 2f       	mov	r31, r30
     c74:	29 d0       	rcall	.+82     	; 0xcc8 <__divsf3_pse+0x92>
     c76:	66 0f       	add	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	88 1f       	adc	r24, r24
     c7c:	bb 1f       	adc	r27, r27
     c7e:	26 17       	cp	r18, r22
     c80:	37 07       	cpc	r19, r23
     c82:	48 07       	cpc	r20, r24
     c84:	ab 07       	cpc	r26, r27
     c86:	b0 e8       	ldi	r27, 0x80	; 128
     c88:	09 f0       	breq	.+2      	; 0xc8c <__divsf3_pse+0x56>
     c8a:	bb 0b       	sbc	r27, r27
     c8c:	80 2d       	mov	r24, r0
     c8e:	bf 01       	movw	r22, r30
     c90:	ff 27       	eor	r31, r31
     c92:	93 58       	subi	r25, 0x83	; 131
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	3a f0       	brmi	.+14     	; 0xca6 <__divsf3_pse+0x70>
     c98:	9e 3f       	cpi	r25, 0xFE	; 254
     c9a:	51 05       	cpc	r21, r1
     c9c:	78 f0       	brcs	.+30     	; 0xcbc <__divsf3_pse+0x86>
     c9e:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>
     ca2:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>
     ca6:	5f 3f       	cpi	r21, 0xFF	; 255
     ca8:	e4 f3       	brlt	.-8      	; 0xca2 <__divsf3_pse+0x6c>
     caa:	98 3e       	cpi	r25, 0xE8	; 232
     cac:	d4 f3       	brlt	.-12     	; 0xca2 <__divsf3_pse+0x6c>
     cae:	86 95       	lsr	r24
     cb0:	77 95       	ror	r23
     cb2:	67 95       	ror	r22
     cb4:	b7 95       	ror	r27
     cb6:	f7 95       	ror	r31
     cb8:	9f 5f       	subi	r25, 0xFF	; 255
     cba:	c9 f7       	brne	.-14     	; 0xcae <__divsf3_pse+0x78>
     cbc:	88 0f       	add	r24, r24
     cbe:	91 1d       	adc	r25, r1
     cc0:	96 95       	lsr	r25
     cc2:	87 95       	ror	r24
     cc4:	97 f9       	bld	r25, 7
     cc6:	08 95       	ret
     cc8:	e1 e0       	ldi	r30, 0x01	; 1
     cca:	66 0f       	add	r22, r22
     ccc:	77 1f       	adc	r23, r23
     cce:	88 1f       	adc	r24, r24
     cd0:	bb 1f       	adc	r27, r27
     cd2:	62 17       	cp	r22, r18
     cd4:	73 07       	cpc	r23, r19
     cd6:	84 07       	cpc	r24, r20
     cd8:	ba 07       	cpc	r27, r26
     cda:	20 f0       	brcs	.+8      	; 0xce4 <__divsf3_pse+0xae>
     cdc:	62 1b       	sub	r22, r18
     cde:	73 0b       	sbc	r23, r19
     ce0:	84 0b       	sbc	r24, r20
     ce2:	ba 0b       	sbc	r27, r26
     ce4:	ee 1f       	adc	r30, r30
     ce6:	88 f7       	brcc	.-30     	; 0xcca <__divsf3_pse+0x94>
     ce8:	e0 95       	com	r30
     cea:	08 95       	ret

00000cec <__fixsfsi>:
     cec:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fixunssfsi>
     cf0:	68 94       	set
     cf2:	b1 11       	cpse	r27, r1
     cf4:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>
     cf8:	08 95       	ret

00000cfa <__fixunssfsi>:
     cfa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fp_splitA>
     cfe:	88 f0       	brcs	.+34     	; 0xd22 <__fixunssfsi+0x28>
     d00:	9f 57       	subi	r25, 0x7F	; 127
     d02:	98 f0       	brcs	.+38     	; 0xd2a <__fixunssfsi+0x30>
     d04:	b9 2f       	mov	r27, r25
     d06:	99 27       	eor	r25, r25
     d08:	b7 51       	subi	r27, 0x17	; 23
     d0a:	b0 f0       	brcs	.+44     	; 0xd38 <__fixunssfsi+0x3e>
     d0c:	e1 f0       	breq	.+56     	; 0xd46 <__fixunssfsi+0x4c>
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	1a f0       	brmi	.+6      	; 0xd1e <__fixunssfsi+0x24>
     d18:	ba 95       	dec	r27
     d1a:	c9 f7       	brne	.-14     	; 0xd0e <__fixunssfsi+0x14>
     d1c:	14 c0       	rjmp	.+40     	; 0xd46 <__fixunssfsi+0x4c>
     d1e:	b1 30       	cpi	r27, 0x01	; 1
     d20:	91 f0       	breq	.+36     	; 0xd46 <__fixunssfsi+0x4c>
     d22:	0e 94 57 07 	call	0xeae	; 0xeae <__fp_zero>
     d26:	b1 e0       	ldi	r27, 0x01	; 1
     d28:	08 95       	ret
     d2a:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_zero>
     d2e:	67 2f       	mov	r22, r23
     d30:	78 2f       	mov	r23, r24
     d32:	88 27       	eor	r24, r24
     d34:	b8 5f       	subi	r27, 0xF8	; 248
     d36:	39 f0       	breq	.+14     	; 0xd46 <__fixunssfsi+0x4c>
     d38:	b9 3f       	cpi	r27, 0xF9	; 249
     d3a:	cc f3       	brlt	.-14     	; 0xd2e <__fixunssfsi+0x34>
     d3c:	86 95       	lsr	r24
     d3e:	77 95       	ror	r23
     d40:	67 95       	ror	r22
     d42:	b3 95       	inc	r27
     d44:	d9 f7       	brne	.-10     	; 0xd3c <__fixunssfsi+0x42>
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__fixunssfsi+0x5c>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	08 95       	ret

00000d58 <__floatunsisf>:
     d58:	e8 94       	clt
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <__floatsisf+0x12>

00000d5c <__floatsisf>:
     d5c:	97 fb       	bst	r25, 7
     d5e:	3e f4       	brtc	.+14     	; 0xd6e <__floatsisf+0x12>
     d60:	90 95       	com	r25
     d62:	80 95       	com	r24
     d64:	70 95       	com	r23
     d66:	61 95       	neg	r22
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	8f 4f       	sbci	r24, 0xFF	; 255
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	99 23       	and	r25, r25
     d70:	a9 f0       	breq	.+42     	; 0xd9c <__floatsisf+0x40>
     d72:	f9 2f       	mov	r31, r25
     d74:	96 e9       	ldi	r25, 0x96	; 150
     d76:	bb 27       	eor	r27, r27
     d78:	93 95       	inc	r25
     d7a:	f6 95       	lsr	r31
     d7c:	87 95       	ror	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b7 95       	ror	r27
     d84:	f1 11       	cpse	r31, r1
     d86:	f8 cf       	rjmp	.-16     	; 0xd78 <__floatsisf+0x1c>
     d88:	fa f4       	brpl	.+62     	; 0xdc8 <__floatsisf+0x6c>
     d8a:	bb 0f       	add	r27, r27
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__floatsisf+0x36>
     d8e:	60 ff       	sbrs	r22, 0
     d90:	1b c0       	rjmp	.+54     	; 0xdc8 <__floatsisf+0x6c>
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <__floatsisf+0x6c>
     d9c:	88 23       	and	r24, r24
     d9e:	11 f0       	breq	.+4      	; 0xda4 <__floatsisf+0x48>
     da0:	96 e9       	ldi	r25, 0x96	; 150
     da2:	11 c0       	rjmp	.+34     	; 0xdc6 <__floatsisf+0x6a>
     da4:	77 23       	and	r23, r23
     da6:	21 f0       	breq	.+8      	; 0xdb0 <__floatsisf+0x54>
     da8:	9e e8       	ldi	r25, 0x8E	; 142
     daa:	87 2f       	mov	r24, r23
     dac:	76 2f       	mov	r23, r22
     dae:	05 c0       	rjmp	.+10     	; 0xdba <__floatsisf+0x5e>
     db0:	66 23       	and	r22, r22
     db2:	71 f0       	breq	.+28     	; 0xdd0 <__floatsisf+0x74>
     db4:	96 e8       	ldi	r25, 0x86	; 134
     db6:	86 2f       	mov	r24, r22
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	2a f0       	brmi	.+10     	; 0xdc8 <__floatsisf+0x6c>
     dbe:	9a 95       	dec	r25
     dc0:	66 0f       	add	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	88 1f       	adc	r24, r24
     dc6:	da f7       	brpl	.-10     	; 0xdbe <__floatsisf+0x62>
     dc8:	88 0f       	add	r24, r24
     dca:	96 95       	lsr	r25
     dcc:	87 95       	ror	r24
     dce:	97 f9       	bld	r25, 7
     dd0:	08 95       	ret

00000dd2 <__fp_cmp>:
     dd2:	99 0f       	add	r25, r25
     dd4:	00 08       	sbc	r0, r0
     dd6:	55 0f       	add	r21, r21
     dd8:	aa 0b       	sbc	r26, r26
     dda:	e0 e8       	ldi	r30, 0x80	; 128
     ddc:	fe ef       	ldi	r31, 0xFE	; 254
     dde:	16 16       	cp	r1, r22
     de0:	17 06       	cpc	r1, r23
     de2:	e8 07       	cpc	r30, r24
     de4:	f9 07       	cpc	r31, r25
     de6:	c0 f0       	brcs	.+48     	; 0xe18 <__fp_cmp+0x46>
     de8:	12 16       	cp	r1, r18
     dea:	13 06       	cpc	r1, r19
     dec:	e4 07       	cpc	r30, r20
     dee:	f5 07       	cpc	r31, r21
     df0:	98 f0       	brcs	.+38     	; 0xe18 <__fp_cmp+0x46>
     df2:	62 1b       	sub	r22, r18
     df4:	73 0b       	sbc	r23, r19
     df6:	84 0b       	sbc	r24, r20
     df8:	95 0b       	sbc	r25, r21
     dfa:	39 f4       	brne	.+14     	; 0xe0a <__fp_cmp+0x38>
     dfc:	0a 26       	eor	r0, r26
     dfe:	61 f0       	breq	.+24     	; 0xe18 <__fp_cmp+0x46>
     e00:	23 2b       	or	r18, r19
     e02:	24 2b       	or	r18, r20
     e04:	25 2b       	or	r18, r21
     e06:	21 f4       	brne	.+8      	; 0xe10 <__fp_cmp+0x3e>
     e08:	08 95       	ret
     e0a:	0a 26       	eor	r0, r26
     e0c:	09 f4       	brne	.+2      	; 0xe10 <__fp_cmp+0x3e>
     e0e:	a1 40       	sbci	r26, 0x01	; 1
     e10:	a6 95       	lsr	r26
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	81 1d       	adc	r24, r1
     e16:	81 1d       	adc	r24, r1
     e18:	08 95       	ret

00000e1a <__fp_inf>:
     e1a:	97 f9       	bld	r25, 7
     e1c:	9f 67       	ori	r25, 0x7F	; 127
     e1e:	80 e8       	ldi	r24, 0x80	; 128
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	08 95       	ret

00000e26 <__fp_nan>:
     e26:	9f ef       	ldi	r25, 0xFF	; 255
     e28:	80 ec       	ldi	r24, 0xC0	; 192
     e2a:	08 95       	ret

00000e2c <__fp_pscA>:
     e2c:	00 24       	eor	r0, r0
     e2e:	0a 94       	dec	r0
     e30:	16 16       	cp	r1, r22
     e32:	17 06       	cpc	r1, r23
     e34:	18 06       	cpc	r1, r24
     e36:	09 06       	cpc	r0, r25
     e38:	08 95       	ret

00000e3a <__fp_pscB>:
     e3a:	00 24       	eor	r0, r0
     e3c:	0a 94       	dec	r0
     e3e:	12 16       	cp	r1, r18
     e40:	13 06       	cpc	r1, r19
     e42:	14 06       	cpc	r1, r20
     e44:	05 06       	cpc	r0, r21
     e46:	08 95       	ret

00000e48 <__fp_round>:
     e48:	09 2e       	mov	r0, r25
     e4a:	03 94       	inc	r0
     e4c:	00 0c       	add	r0, r0
     e4e:	11 f4       	brne	.+4      	; 0xe54 <__fp_round+0xc>
     e50:	88 23       	and	r24, r24
     e52:	52 f0       	brmi	.+20     	; 0xe68 <__fp_round+0x20>
     e54:	bb 0f       	add	r27, r27
     e56:	40 f4       	brcc	.+16     	; 0xe68 <__fp_round+0x20>
     e58:	bf 2b       	or	r27, r31
     e5a:	11 f4       	brne	.+4      	; 0xe60 <__fp_round+0x18>
     e5c:	60 ff       	sbrs	r22, 0
     e5e:	04 c0       	rjmp	.+8      	; 0xe68 <__fp_round+0x20>
     e60:	6f 5f       	subi	r22, 0xFF	; 255
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	8f 4f       	sbci	r24, 0xFF	; 255
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	08 95       	ret

00000e6a <__fp_split3>:
     e6a:	57 fd       	sbrc	r21, 7
     e6c:	90 58       	subi	r25, 0x80	; 128
     e6e:	44 0f       	add	r20, r20
     e70:	55 1f       	adc	r21, r21
     e72:	59 f0       	breq	.+22     	; 0xe8a <__fp_splitA+0x10>
     e74:	5f 3f       	cpi	r21, 0xFF	; 255
     e76:	71 f0       	breq	.+28     	; 0xe94 <__fp_splitA+0x1a>
     e78:	47 95       	ror	r20

00000e7a <__fp_splitA>:
     e7a:	88 0f       	add	r24, r24
     e7c:	97 fb       	bst	r25, 7
     e7e:	99 1f       	adc	r25, r25
     e80:	61 f0       	breq	.+24     	; 0xe9a <__fp_splitA+0x20>
     e82:	9f 3f       	cpi	r25, 0xFF	; 255
     e84:	79 f0       	breq	.+30     	; 0xea4 <__fp_splitA+0x2a>
     e86:	87 95       	ror	r24
     e88:	08 95       	ret
     e8a:	12 16       	cp	r1, r18
     e8c:	13 06       	cpc	r1, r19
     e8e:	14 06       	cpc	r1, r20
     e90:	55 1f       	adc	r21, r21
     e92:	f2 cf       	rjmp	.-28     	; 0xe78 <__fp_split3+0xe>
     e94:	46 95       	lsr	r20
     e96:	f1 df       	rcall	.-30     	; 0xe7a <__fp_splitA>
     e98:	08 c0       	rjmp	.+16     	; 0xeaa <__fp_splitA+0x30>
     e9a:	16 16       	cp	r1, r22
     e9c:	17 06       	cpc	r1, r23
     e9e:	18 06       	cpc	r1, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	f1 cf       	rjmp	.-30     	; 0xe86 <__fp_splitA+0xc>
     ea4:	86 95       	lsr	r24
     ea6:	71 05       	cpc	r23, r1
     ea8:	61 05       	cpc	r22, r1
     eaa:	08 94       	sec
     eac:	08 95       	ret

00000eae <__fp_zero>:
     eae:	e8 94       	clt

00000eb0 <__fp_szero>:
     eb0:	bb 27       	eor	r27, r27
     eb2:	66 27       	eor	r22, r22
     eb4:	77 27       	eor	r23, r23
     eb6:	cb 01       	movw	r24, r22
     eb8:	97 f9       	bld	r25, 7
     eba:	08 95       	ret

00000ebc <__mulsf3>:
     ebc:	0e 94 71 07 	call	0xee2	; 0xee2 <__mulsf3x>
     ec0:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__fp_round>
     ec4:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_pscA>
     ec8:	38 f0       	brcs	.+14     	; 0xed8 <__mulsf3+0x1c>
     eca:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fp_pscB>
     ece:	20 f0       	brcs	.+8      	; 0xed8 <__mulsf3+0x1c>
     ed0:	95 23       	and	r25, r21
     ed2:	11 f0       	breq	.+4      	; 0xed8 <__mulsf3+0x1c>
     ed4:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>
     ed8:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_nan>
     edc:	11 24       	eor	r1, r1
     ede:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>

00000ee2 <__mulsf3x>:
     ee2:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fp_split3>
     ee6:	70 f3       	brcs	.-36     	; 0xec4 <__mulsf3+0x8>

00000ee8 <__mulsf3_pse>:
     ee8:	95 9f       	mul	r25, r21
     eea:	c1 f3       	breq	.-16     	; 0xedc <__mulsf3+0x20>
     eec:	95 0f       	add	r25, r21
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	55 1f       	adc	r21, r21
     ef2:	62 9f       	mul	r22, r18
     ef4:	f0 01       	movw	r30, r0
     ef6:	72 9f       	mul	r23, r18
     ef8:	bb 27       	eor	r27, r27
     efa:	f0 0d       	add	r31, r0
     efc:	b1 1d       	adc	r27, r1
     efe:	63 9f       	mul	r22, r19
     f00:	aa 27       	eor	r26, r26
     f02:	f0 0d       	add	r31, r0
     f04:	b1 1d       	adc	r27, r1
     f06:	aa 1f       	adc	r26, r26
     f08:	64 9f       	mul	r22, r20
     f0a:	66 27       	eor	r22, r22
     f0c:	b0 0d       	add	r27, r0
     f0e:	a1 1d       	adc	r26, r1
     f10:	66 1f       	adc	r22, r22
     f12:	82 9f       	mul	r24, r18
     f14:	22 27       	eor	r18, r18
     f16:	b0 0d       	add	r27, r0
     f18:	a1 1d       	adc	r26, r1
     f1a:	62 1f       	adc	r22, r18
     f1c:	73 9f       	mul	r23, r19
     f1e:	b0 0d       	add	r27, r0
     f20:	a1 1d       	adc	r26, r1
     f22:	62 1f       	adc	r22, r18
     f24:	83 9f       	mul	r24, r19
     f26:	a0 0d       	add	r26, r0
     f28:	61 1d       	adc	r22, r1
     f2a:	22 1f       	adc	r18, r18
     f2c:	74 9f       	mul	r23, r20
     f2e:	33 27       	eor	r19, r19
     f30:	a0 0d       	add	r26, r0
     f32:	61 1d       	adc	r22, r1
     f34:	23 1f       	adc	r18, r19
     f36:	84 9f       	mul	r24, r20
     f38:	60 0d       	add	r22, r0
     f3a:	21 1d       	adc	r18, r1
     f3c:	82 2f       	mov	r24, r18
     f3e:	76 2f       	mov	r23, r22
     f40:	6a 2f       	mov	r22, r26
     f42:	11 24       	eor	r1, r1
     f44:	9f 57       	subi	r25, 0x7F	; 127
     f46:	50 40       	sbci	r21, 0x00	; 0
     f48:	9a f0       	brmi	.+38     	; 0xf70 <__mulsf3_pse+0x88>
     f4a:	f1 f0       	breq	.+60     	; 0xf88 <__mulsf3_pse+0xa0>
     f4c:	88 23       	and	r24, r24
     f4e:	4a f0       	brmi	.+18     	; 0xf62 <__mulsf3_pse+0x7a>
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	bb 1f       	adc	r27, r27
     f56:	66 1f       	adc	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	91 50       	subi	r25, 0x01	; 1
     f5e:	50 40       	sbci	r21, 0x00	; 0
     f60:	a9 f7       	brne	.-22     	; 0xf4c <__mulsf3_pse+0x64>
     f62:	9e 3f       	cpi	r25, 0xFE	; 254
     f64:	51 05       	cpc	r21, r1
     f66:	80 f0       	brcs	.+32     	; 0xf88 <__mulsf3_pse+0xa0>
     f68:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_inf>
     f6c:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_szero>
     f70:	5f 3f       	cpi	r21, 0xFF	; 255
     f72:	e4 f3       	brlt	.-8      	; 0xf6c <__mulsf3_pse+0x84>
     f74:	98 3e       	cpi	r25, 0xE8	; 232
     f76:	d4 f3       	brlt	.-12     	; 0xf6c <__mulsf3_pse+0x84>
     f78:	86 95       	lsr	r24
     f7a:	77 95       	ror	r23
     f7c:	67 95       	ror	r22
     f7e:	b7 95       	ror	r27
     f80:	f7 95       	ror	r31
     f82:	e7 95       	ror	r30
     f84:	9f 5f       	subi	r25, 0xFF	; 255
     f86:	c1 f7       	brne	.-16     	; 0xf78 <__mulsf3_pse+0x90>
     f88:	fe 2b       	or	r31, r30
     f8a:	88 0f       	add	r24, r24
     f8c:	91 1d       	adc	r25, r1
     f8e:	96 95       	lsr	r25
     f90:	87 95       	ror	r24
     f92:	97 f9       	bld	r25, 7
     f94:	08 95       	ret

00000f96 <__divmodhi4>:
     f96:	97 fb       	bst	r25, 7
     f98:	07 2e       	mov	r0, r23
     f9a:	16 f4       	brtc	.+4      	; 0xfa0 <__divmodhi4+0xa>
     f9c:	00 94       	com	r0
     f9e:	07 d0       	rcall	.+14     	; 0xfae <__divmodhi4_neg1>
     fa0:	77 fd       	sbrc	r23, 7
     fa2:	09 d0       	rcall	.+18     	; 0xfb6 <__divmodhi4_neg2>
     fa4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__udivmodhi4>
     fa8:	07 fc       	sbrc	r0, 7
     faa:	05 d0       	rcall	.+10     	; 0xfb6 <__divmodhi4_neg2>
     fac:	3e f4       	brtc	.+14     	; 0xfbc <__divmodhi4_exit>

00000fae <__divmodhi4_neg1>:
     fae:	90 95       	com	r25
     fb0:	81 95       	neg	r24
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	08 95       	ret

00000fb6 <__divmodhi4_neg2>:
     fb6:	70 95       	com	r23
     fb8:	61 95       	neg	r22
     fba:	7f 4f       	sbci	r23, 0xFF	; 255

00000fbc <__divmodhi4_exit>:
     fbc:	08 95       	ret

00000fbe <__umulhisi3>:
     fbe:	a2 9f       	mul	r26, r18
     fc0:	b0 01       	movw	r22, r0
     fc2:	b3 9f       	mul	r27, r19
     fc4:	c0 01       	movw	r24, r0
     fc6:	a3 9f       	mul	r26, r19
     fc8:	70 0d       	add	r23, r0
     fca:	81 1d       	adc	r24, r1
     fcc:	11 24       	eor	r1, r1
     fce:	91 1d       	adc	r25, r1
     fd0:	b2 9f       	mul	r27, r18
     fd2:	70 0d       	add	r23, r0
     fd4:	81 1d       	adc	r24, r1
     fd6:	11 24       	eor	r1, r1
     fd8:	91 1d       	adc	r25, r1
     fda:	08 95       	ret

00000fdc <__udivmodhi4>:
     fdc:	aa 1b       	sub	r26, r26
     fde:	bb 1b       	sub	r27, r27
     fe0:	51 e1       	ldi	r21, 0x11	; 17
     fe2:	07 c0       	rjmp	.+14     	; 0xff2 <__udivmodhi4_ep>

00000fe4 <__udivmodhi4_loop>:
     fe4:	aa 1f       	adc	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	a6 17       	cp	r26, r22
     fea:	b7 07       	cpc	r27, r23
     fec:	10 f0       	brcs	.+4      	; 0xff2 <__udivmodhi4_ep>
     fee:	a6 1b       	sub	r26, r22
     ff0:	b7 0b       	sbc	r27, r23

00000ff2 <__udivmodhi4_ep>:
     ff2:	88 1f       	adc	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	5a 95       	dec	r21
     ff8:	a9 f7       	brne	.-22     	; 0xfe4 <__udivmodhi4_loop>
     ffa:	80 95       	com	r24
     ffc:	90 95       	com	r25
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	08 95       	ret

00001004 <_exit>:
    1004:	f8 94       	cli

00001006 <__stop_program>:
    1006:	ff cf       	rjmp	.-2      	; 0x1006 <__stop_program>
